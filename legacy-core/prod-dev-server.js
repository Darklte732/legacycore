// Production-like development server
require('./polyfills');
const { createServer } = require('http');
const { parse } = require('url');
const next = require('next');
const path = require('path');
const fs = require('fs');

// Using development mode but with some production optimizations
const dev = true; // Always true to avoid build issues
const hostname = 'localhost';
const port = process.env.PORT || 3000;

// Ensure necessary directories exist
const nextDir = path.join(__dirname, '.next');
const serverDir = path.join(nextDir, 'server');

// Create mock prerender-manifest if it doesn't exist
function createMockPrerenderManifest() {
  const prerenderDir = path.join(nextDir);
  const prerenderFile = path.join(prerenderDir, 'prerender-manifest.js');
  
  if (!fs.existsSync(prerenderDir)) {
    fs.mkdirSync(prerenderDir, { recursive: true });
  }
  
  if (!fs.existsSync(prerenderFile)) {
    const mockContent = `
    // Mock prerender-manifest.js generated by prod-dev-server.js
    module.exports = {
      version: 4,
      routes: {},
      dynamicRoutes: {},
      preview: {
        previewModeId: "development-preview-id",
        previewModeSigningKey: "development-preview-key",
        previewModeEncryptionKey: "development-preview-encryption-key"
      }
    };
    `;
    
    fs.writeFileSync(prerenderFile, mockContent);
    console.log('Created mock prerender-manifest.js');
  }
  
  // Also create the JSON version
  const prerenderJsonFile = path.join(prerenderDir, 'prerender-manifest.json');
  
  if (!fs.existsSync(prerenderJsonFile)) {
    const mockJsonContent = JSON.stringify({
      version: 4,
      routes: {},
      dynamicRoutes: {},
      preview: {
        previewModeId: "development-preview-id",
        previewModeSigningKey: "development-preview-key",
        previewModeEncryptionKey: "development-preview-encryption-key"
      }
    }, null, 2);
    
    fs.writeFileSync(prerenderJsonFile, mockJsonContent);
    console.log('Created mock prerender-manifest.json');
  }
}

// Initialize Next.js app
const app = next({ dev, hostname, port, customServer: true });
const handle = app.getRequestHandler();

console.log('Starting production-like development server...');
console.log('Note: This uses development mode with some production optimizations');

// Create mock files before preparing the app
createMockPrerenderManifest();

app.prepare().then(() => {
  createServer(async (req, res) => {
    try {
      // Set some production-like headers for all responses
      res.setHeader('X-Content-Type-Options', 'nosniff');
      res.setHeader('X-Frame-Options', 'DENY');
      res.setHeader('X-XSS-Protection', '1; mode=block');
      
      // Parse request URL
      const parsedUrl = parse(req.url, true);
      const { pathname } = parsedUrl;
      
      // Let Next.js handle the request
      await handle(req, res, parsedUrl);
    } catch (err) {
      console.error('Error handling request:', err);
      res.statusCode = 500;
      res.end('Internal Server Error');
    }
  }).listen(port, (err) => {
    if (err) throw err;
    console.log(`> Ready on http://${hostname}:${port}`);
    console.log('> Mode: Production-like development server');
  });
}); 